//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_Client.ServiceCatalog {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WcfService.Model")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceCatalog.ICatalog")]
    public interface ICatalog {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetContacts", ReplyAction="http://tempuri.org/ICatalog/GetContactsResponse")]
        WCF_Client.ServiceCatalog.User[] GetContacts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetContacts", ReplyAction="http://tempuri.org/ICatalog/GetContactsResponse")]
        System.Threading.Tasks.Task<WCF_Client.ServiceCatalog.User[]> GetContactsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/AddData", ReplyAction="http://tempuri.org/ICatalog/AddDataResponse")]
        void AddData(WCF_Client.ServiceCatalog.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/AddData", ReplyAction="http://tempuri.org/ICatalog/AddDataResponse")]
        System.Threading.Tasks.Task AddDataAsync(WCF_Client.ServiceCatalog.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteDataById", ReplyAction="http://tempuri.org/ICatalog/DeleteDataByIdResponse")]
        bool DeleteDataById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteDataById", ReplyAction="http://tempuri.org/ICatalog/DeleteDataByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteDataByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateData", ReplyAction="http://tempuri.org/ICatalog/UpdateDataResponse")]
        void UpdateData(WCF_Client.ServiceCatalog.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateData", ReplyAction="http://tempuri.org/ICatalog/UpdateDataResponse")]
        System.Threading.Tasks.Task UpdateDataAsync(WCF_Client.ServiceCatalog.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetOneById", ReplyAction="http://tempuri.org/ICatalog/GetOneByIdResponse")]
        WCF_Client.ServiceCatalog.User GetOneById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetOneById", ReplyAction="http://tempuri.org/ICatalog/GetOneByIdResponse")]
        System.Threading.Tasks.Task<WCF_Client.ServiceCatalog.User> GetOneByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICatalogChannel : WCF_Client.ServiceCatalog.ICatalog, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CatalogClient : System.ServiceModel.ClientBase<WCF_Client.ServiceCatalog.ICatalog>, WCF_Client.ServiceCatalog.ICatalog {
        
        public CatalogClient() {
        }
        
        public CatalogClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CatalogClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CatalogClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CatalogClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCF_Client.ServiceCatalog.User[] GetContacts() {
            return base.Channel.GetContacts();
        }
        
        public System.Threading.Tasks.Task<WCF_Client.ServiceCatalog.User[]> GetContactsAsync() {
            return base.Channel.GetContactsAsync();
        }
        
        public void AddData(WCF_Client.ServiceCatalog.User user) {
            base.Channel.AddData(user);
        }
        
        public System.Threading.Tasks.Task AddDataAsync(WCF_Client.ServiceCatalog.User user) {
            return base.Channel.AddDataAsync(user);
        }
        
        public bool DeleteDataById(int id) {
            return base.Channel.DeleteDataById(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDataByIdAsync(int id) {
            return base.Channel.DeleteDataByIdAsync(id);
        }
        
        public void UpdateData(WCF_Client.ServiceCatalog.User user) {
            base.Channel.UpdateData(user);
        }
        
        public System.Threading.Tasks.Task UpdateDataAsync(WCF_Client.ServiceCatalog.User user) {
            return base.Channel.UpdateDataAsync(user);
        }
        
        public WCF_Client.ServiceCatalog.User GetOneById(int id) {
            return base.Channel.GetOneById(id);
        }
        
        public System.Threading.Tasks.Task<WCF_Client.ServiceCatalog.User> GetOneByIdAsync(int id) {
            return base.Channel.GetOneByIdAsync(id);
        }
    }
}
